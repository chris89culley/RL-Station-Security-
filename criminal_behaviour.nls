;only call follow-target when target is in field of view
to follow-target [person target]
  ask person [
    let p-type [patch-type] of patch-here  ; set the current patch type
    let target-p-type [[patch-type] of patch-here] of target ; set the current patch type of target
    
    ifelse follow_on_the_same_platform_or_stairs_and_corridor self p-type target-p-type [
      face-target-forward-one self target] ;if on the same patch type or on stairs and corridor, set heading to target and forward 1
    
    [ifelse follow_from_platform_to_target_on_stairs_or_corridor self target p-type target-p-type [
      face-south-forward-one self] ;if on platform and target is on stairs or corridor, move south by 1 until ycors are the same 
      [ifelse p-type = "stairs" or p-type = "corridor"[ 
        
        ifelse [xcor] of target < xcor [ ; if on stairs or corridorand xcor of the target is smaller
          face-west-forward-one self] ; move west by 1 until xcors are the same
        
        [face-target-forward-one self target]] ; if xcors is the same or smaller than xcor of target, set heading towards target and forward 1
        
       [ifelse [xcor] of target > xcor [ ; if on stairs or corridorand xcor of the target is larger
          face-east-forward-one self] ; move east by 1 until xcors are the same
          
          [face-target-forward-one self target]] ; if xcors is the same or smaller than xcor of target, set heading towards target and forward 1 
    ]]
  ]
end


to steal-target [ person target ]
   let temp1 [money] of person ; set local variable temp1 to hold criminal's initial balance
   let success-rate [vulnerability] of target ; set local variable success-reate equal to global vulnerability of the victim
   ifelse random-float 1 < success-rate [ ; generate random floating number betwwen 0 and 1, if the number is less than the success-rate
   ask person [set money temp1 + [money] of target] ; ask criminal to set money of temp1 + temp2
    ask target[set money 0]]; ask vitim to set money to 0
  [ask person [move-around-randomly myself]] ;if fail to steal, move around randomly
end

to leave-objective [person p-num p-type]
  ifelse p-num != objective-number or p-type = "stairs" [
    change-platform-step person 
  ][
    try-and-exit person p-num
  ]  
  
end 

to walk-to-destination [pass destination]
  set heading towards destination
  fd 1
end 


to look-around [person platform-number] ; pass in the objective platform that crimanl needs to explore
  ask person[
    look self ; initiate look operation function
    let p-num [number] of patch-here ;set the current platform number of the patch here
    let p-type [patch-type] of patch-here ; set the type of patch here
    set objective-number platform-number ; set global objective-number of the criminal to the input platform-number argument (input through GUI)
    
    let x xcor ;set the current xcor local value
    let y_north max-pycor * 0.9 ;set the local ycor of north platform
    let y_south max-pycor * 0.2 ; set the local ycor of south platform
    let destination-north patch x y_north ; set the local north destination
    let destination-south patch x y_south ; set the local south destination
    
    ifelse (p-num = objective-number and p-type = "platform") or (p-num = objective-number and p-type = "entrance")[ ; if we are on the right platform
      ifelse y_north > ycor and heading = 0[ ; if we are not north enough towards the north side of the platform and heading is north
        ifelse (patch-here = destination-north) [ ; if we are on the north destination location
          walk-to-destination self destination-south ; face south and walk towards south destination location
          ][
          walk-to-destination self destination-north ; if not on the north destination location, keep walking north
          ]
      ][
        ifelse patch-here = destination-south [ ; if on the south destination location
          walk-to-destination self destination-north ; face north and walk towards north destination location
          ][ ; 
          walk-to-destination self destination-south ; if not on the south destination location then keep heading south
          ]]
       ][
    change-platform-step self] ; if on the wrong platform then keep changing platform
  ]
  
end


to-report shortest-distance [distances]
  report position min distances distances 
end 


to-report heading-setup [pass heading-angle degree]
  let heading-x heading-angle + degree
  if heading-x > 360 [set heading-x (heading-x - 360)]
  report heading-x
end

to move-to-q-d [pass target qx-d]
 
    ifelse patch-here = qx-d[
      set heading towards target
      fd 1
      stop][
      set heading towards qx-d
      fd 1]
end 

  
to look-for-another-angle [ person target ]
  ask person [
    
    ifelse distance target < 10 [
    set heading towards target ; set heading towards target at the start of each tick
    look self ; initiate look operation function
    
    let properties get-target-properties self target ; get properties of the target
    let target-angle-list get_stored_angle_list target properties ; get angle-list of the target calling a local variable target-angle-list
    let r 3 ; radius of the circle 
    
    let headings map [ x -> heading-setup self [heading] of target x ] (list 10 100 190 280) 
    let quadrants map [ x -> patch-right-and-ahead x r] headings 
    
    if position nobody quadrants != FALSE[
     set quadrants replace-item (position nobody quadrants) quadrants 10000  ; here we stop the bug when the patch isn't there 
    ]
 
    let distances map [x -> distance x] quadrants 
    let min_distance_index shortest-distance distances 

    ifelse (item min_distance_index target-angle-list = 0)  [ ; if quadrant x is unseen and quadrant x target patch is the nearest
          move-to-q-d self target (item min_distance_index quadrants) 
      ] ; set heading to quadrant 1 target patch and fd 1
      [ 
        let next_to_search_for position 1 target-angle-list
        move-to-q-d self target (item next_to_search_for quadrants) 
    ]]
   [
    print "there is an issue in looking for another angle - not in range"
    set heading towards target ; if person not within this range, face towards target and fd 1
      fd 1]   ] 
  
end


to explore-condition-update [pers] 
  
  let desireability map [x -> ((item 6 x / 2) + item 5 x) * (1 - item 7 x) * 10 / (ticks - (item 1 x) + 1) * 1 / (abs (distancexy item 2 x item 3 x)) ] seen-list 
  ifelse length seen-list > 0 and max desireability > target_desireabiliy [
   print "list of desireability calculations"
   print desireability 
   print "targetting target = " 
   set objective "investigate" 
   set victim-target item position (max desireability) desireability seen-list 
   print victim-target
  ][
    set objective "explore" 
  ]
  
  
end 


to investigate-condition-update [pers target]
   print "investigating target = "
   print target
   let des ((item 6 target / 2) + item 5 target) * (1 - item 7 target) * 2 / (ticks - (item 1 target) + 1) * 1 / (abs (distancexy item 2 target item 3 target))
   if des > target_steal_desireability [
    set objective  "steal_from_target"
  ]
   if des < give-up-on-target [
    set objective "explore" 
  ]
end 


to check-i-should-still-steal [pers target] 
  if  ((item 6 target / 2) + item 5 target) * (1 - item 7 target) * 2 / (ticks - (item 1 target) + 1) * 1 / (abs (distancexy item 2 target item 3 target)) < give-up-on-target[
   set objective "explore"
  ]
end 


to check-i-should-leave [pers]
  if money > money-crim-happy-with [
    set objective "leave"
  ]
end  



to criminal_turn_movement_decision [pass target p-num p-type]
  
  ; interim objective input via API to change objective during the simulation
   set objective criminal_objective_input ;

      check-i-should-leave pass
      if objective = "leave" [
        set-objective-to-nearest-exit pass p-num
        leave-objective pass p-num p-type
      ]
      if objective = "arrest_target"[ ; need to make sure once we have stolen we make their valuability go down massivley so they don't get picked again 
        check-i-should-still-steal pass victim-target
        follow-target self target
        steal-target self target  
    ]
      if objective = "explore" [
      
      look-around self platform-number-explore
      explore-condition-update pass
  ]
      if objective = "investigate" [
      ;first you need to go to him (might require a change in platform) 
      ; then look from a different angle 
      ;look-for-another-angle self target
      investigate-condition-update pass victim-target
      
  ]

end


