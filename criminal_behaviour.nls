;only call follow-target when target is in field of view
to follow-target [person target]
  ask person [
    let p-type [patch-type] of patch-here  ; set the current patch type
    let target-p-type [[patch-type] of patch-here] of target ; set the current patch type of target
    
    ifelse follow_on_the_same_platform_or_stairs_and_corridor self p-type target-p-type [
      face-target-forward-one self target] ;if on the same patch type or on stairs and corridor, set heading to target and forward 1
    
    [ifelse follow_from_platform_to_target_on_stairs_or_corridor self target p-type target-p-type [
      face-south-forward-one self] ;if on platform and target is on stairs or corridor, move south by 1 until ycors are the same 
      [ifelse p-type = "stairs" or p-type = "corridor"[ 
        
        ifelse [xcor] of target < xcor [ ; if on stairs or corridorand xcor of the target is smaller
          face-west-forward-one self] ; move west by 1 until xcors are the same
        
        [face-target-forward-one self target]] ; if xcors is the same or smaller than xcor of target, set heading towards target and forward 1
        
       [ifelse [xcor] of target > xcor [ ; if on stairs or corridorand xcor of the target is larger
          face-east-forward-one self] ; move east by 1 until xcors are the same
          
          [face-target-forward-one self target]] ; if xcors is the same or smaller than xcor of target, set heading towards target and forward 1 
    ]]
  ]
end


to steal-target [ person target ]
   let temp1 [money] of person ; set local variable temp1 to hold criminal's initial balance
   let success-rate [vulnerability] of target ; set local variable success-reate equal to global vulnerability of the victim
   ifelse random-float 1 < success-rate [ ; generate random floating number betwwen 0 and 1, if the number is less than the success-rate
   ask person [set money temp1 + [money] of target] ; ask criminal to set money of temp1 + temp2
    ask target[set money 0]]; ask vitim to set money to 0
  [ask person [move-around-randomly myself]] ;if fail to steal, move around randomly
end

to leave-objective [person p-num p-type]
  ifelse p-num != objective-number or p-type = "stairs" [
    change-platform-step person 
  ][
    try-and-exit person p-num
  ]  
  
end 


to explore-station [person platform-number] ; pass in the objective platform that crimanl needs to explore
  ask person[
    let p-num [number] of patch-here ;set the current platform number of the patch here
    let p-type [patch-type] of patch-here ; set the type of patch here
    set objective-number platform-number ; set global objective-number of the criminal to the input platform-number argument (input through GUI)
    
    ifelse p-num != objective-number[ ; if on the wrong platform
    change-platform-step self] ; change platform to the correcto ne
    [ifelse max-pycor * random-float 1 > ycor and p-type = "platform"[ ; randomply generate how far criminal should explore along the platform
    face-north-forward-one self] ; keep moving down the platform
      [move-around-randomly self]] ; once meet the randomly generated depth of the platform, move around randomly
  ]
  
end


to criminal_turn_movement_decision [pass target p-num p-type]
   carefully[
        if objective = "leave" [
      set-objective-to-nearest-exit pass p-num
      leave-objective pass p-num p-type
      ]
      if objective = "steal_from_target"[
        follow-target self target
        steal-target self target  
  
    ]
      if objective = "explore" [
      explore-station self platform-number-explore
  ]][
    print "there is an error in criminal movement"
  ]
end


