nn;only call follow-target when target is in field of view
to follow-target [person target]
  ask person [
    let p-type [patch-type] of patch-here  ; set the current patch type
    let target-p-type [[patch-type] of patch-here] of target ; set the current patch type of target
    
    ifelse follow_on_the_same_platform_or_stairs_and_corridor self p-type target-p-type [
      face-target-forward-one self target] ;if on the same patch type or on stairs and corridor, set heading to target and forward 1
    
    [ifelse follow_from_platform_to_target_on_stairs_or_corridor self target p-type target-p-type [
      face-south-forward-one self] ;if on platform and target is on stairs or corridor, move south by 1 until ycors are the same 
      [ifelse p-type = "stairs" or p-type = "corridor"[ 
        
        ifelse [xcor] of target < xcor [ ; if on stairs or corridorand xcor of the target is smaller
          face-west-forward-one self] ; move west by 1 until xcors are the same
        
        [face-target-forward-one self target]] ; if xcors is the same or smaller than xcor of target, set heading towards target and forward 1
        
       [ifelse [xcor] of target > xcor [ ; if on stairs or corridorand xcor of the target is larger
          face-east-forward-one self] ; move east by 1 until xcors are the same
          
          [face-target-forward-one self target]] ; if xcors is the same or smaller than xcor of target, set heading towards target and forward 1 
    ]]
  ]
end


to steal-target [ person target ]
   carefully [
   let temp1 [money] of person ; set local variable temp1 to hold criminal's initial balance
   let success-rate [vulnerability] of target ; set local variable success-reate equal to global vulnerability of the victim
   ifelse random-float 1 < success-rate [ ; generate random floating number betwwen 0 and 1, if the number is less than the success-rate
     ask person [set money temp1 + [money] of target ; ask criminal to set money of temp1 + temp2
     move-around-randomly self
     set number-crim-robbed 1 + number-crim-robbed] ; once stolen the money, move around randomly
     ask target[set money 0 ; ask vitim to set money to 0
     set vulnerability 0
     set aesthetic 0]] ; ask vitim to set aesthetic to 0
    [
      call-in-concern target person 
      set objective "explore" 
      ask target [
      set vulnerability 0
      ]    
  ]] ;if fail to steal, move around randomly]
    [move-around-randomly self]
end

to leave-objective [person p-num p-type]
  ifelse p-num != objective-number or p-type = "stairs" [
    change-platform-step person 
  ][
    try-and-exit person p-num
  ]  
  
end 

to walk-to-destination [pass destination]
  set heading towards destination
  move-forward 1 self
end 




to-report shortest-distance [distances]
  report position min distances distances 
end 


to-report heading-setup [pass heading-angle degree]
  let heading-x heading-angle + degree
  if heading-x > 360 [set heading-x (heading-x - 360)]
  report heading-x
end

to move-to-q-d [pass target qx-d]
 
    ifelse patch-here = qx-d[
      set heading towards target
      move-forward 1 self
      stop][
      set heading towards qx-d
      move-forward 1 self]
end 

  
to look-for-another-angle [ person target ]
  ask person [
    
    ifelse distance target < 10 [
    if distance target != 0[
    set heading towards target ; set heading towards target at the start of each tick
      ]
      
    look self ; initiate look operation function
    
    let properties get-target-properties self target ; get properties of the target
    let target-angle-list get_stored_angle_list target properties ; get angle-list of the target calling a local variable target-angle-list
    let r 3 ; radius of the circle 
    
    let headings map [ x -> heading-setup self [heading] of target x ] (list 10 100 190 280) 
    let quadrants map [ x -> patch-right-and-ahead x r] headings 

    if position nobody quadrants != FALSE[
     set quadrants replace-item (position nobody quadrants) quadrants (patch 100 100)  ; here we stop the bug when the patch isn't there 
    ]
 
    let distances map [x -> distance x] quadrants 
    let min_distance_index shortest-distance distances 

      ifelse (item min_distance_index target-angle-list = 0)[ ; if quadrant x is unseen and quadrant x target patch is the nearest and quadrant x is not red (not train line)
        move-to-q-d self target (item min_distance_index quadrants)
      ] ; set heading to quadrant target patch and fd 1
      [ 
        let next_to_search_for position 1 target-angle-list
        move-to-q-d self target (item next_to_search_for quadrants) 
    ]]
   [
    print "there is an issue in looking for another angle - not in range"
    set heading towards target ; if person not within this range, face towards target and fd 1
      move-forward 1 self]   ] 
  
end





to check-i-should-leave [pers]
  if money > money-crim-happy-with [
   change-objective "leave"
  ]
end  



to criminal_turn_movement_decision [pass p-num p-type]
  
  if stopped = true [stop]
  
  ; interim objective input via API to change objective during the simulation
  ; set objective criminal_objective_input ;

      check-i-should-leave pass ; if criminal gets enough dollas
      if objective = "leave" [ ; set objective to leave
        set-objective-to-nearest-exit pass p-num  ; setobjective-number to the nearest exit
        leave-objective pass p-num p-type ; leave the station
      ]
      if objective = "steal_from_target"[ 
 
        let victim item 0 victim-target ; set victim local variable
        check-i-should-still-steal-arrest pass victim-target
        ifelse victim != nobody and distance victim > 1 [ ; if distance between victim and criminal is more than 1
          follow-target self victim][ ; follow the victim
          steal-target self victim] ; if distance between victim and criminak is less than 1, steal the dollas 
    ]
      if objective = "explore" [

      explore 100
      ;look-around self platform-number-explore
      explore-condition-update pass
  ]
      if objective = "investigate" [
        look self
        let victim item 0 victim-target ; set victim local variable
        let previous-location patch (item 2 victim-target)(item 3 victim-target) ; set patch target as the last seen location of victim
    
        ifelse  (patch-here != previous-location) and (any? passengers in-cone 25 60 != victim) [ ; if victim is not in field of view
          ifelse p-num != [number] of previous-location [ ; if on the wrong platform, change platform
          set objective-number [number] of previous-location
          change-platform-step self
          ][
          set heading towards previous-location ; if on the right platform, move towards the previous-location
          move-forward 1 self
          ]][  
      set victim-target get-target-properties self victim ; if victim is already in the field of view, update victim-target memory list by calling look and get-target-properties 
      look-for-another-angle self victim] ; look from a different angle 
        
    
        ; Yang: i am not sure if this belongs here or it should be in the investigate-condition-update as it involves chaning objective
        ; Chris?
        if (patch-here = previous-location) and (any? passengers in-cone 25 60 != victim)[ ; if patch-here is the previous-location and victim is not in the field of view
        set objective-number p-num  ; set objective number to patch here and explore this platform
        change-objective "explore"] ; change objective to explore
    
        investigate-condition-update pass victim-target "steal_from_target"
      
  ]

end



