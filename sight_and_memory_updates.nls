to-report angle-to-quadrant [angle]
  report floor( angle / 90 )
end


to-report  get_stored_angle_list [person properties]
  report item 4 properties
end

to-report previous_predicted_vuln [properties]
  report item 5 properties
end



to-report add_person_details_to_memory [angle-list my-list]
   ;get the angle and decide which quadrant passenger is being observed from -> activate the relavant quadrant
        let angle get-angle myself self
        set angle-list replace-item (angle-to-quadrant angle) angle-list 1



        ;ascertain familiarity, a multiplicative factor applied to judgement -> depends on no. quadrants seen from
        let familiarity (1 / ((sum angle-list) + 1)) * ([judgement] of myself)
        let vuln saturate_0_1 (random-normal vulnerability familiarity)
        let pred_weight saturate_0_1 (random-normal aesthetic familiarity)
        ;now put values into the list along with the calculated values

        set my-list lput (list self ticks (precision xcor 1) (precision ycor 1) angle-list (precision vuln 2) (precision pred_weight 2) (precision familiarity 2)) my-list

        report my-list
end

to-report check-and-move-security-memory [my-list]
  let to-be-removed item 0 my-list
  let person item 0 to-be-removed
  if  is-security? person [
         set my-list replace-item 1 my-list to-be-removed
        ]
  report my-list
end

;maybe change to observe to it reads better?
to look [person]

  ; get agentset of all turtles that are not me
  let jointset (turtle-set securities criminals passengers) with [self != myself]
  ask person[
   let my-list seen-list ;create local list -> so it can be used in the function
   let pass-list [] ;initialise pass-list -> the list of passengers seen
   let pers self
   ask jointset in-cone 25 60[ ;ask all agents in field of view

      ;go through the memory list create list of passengerIDs that we are looking at
      foreach my-list [[val]->
        let person_memory item 0 val
        ifelse  person_memory = nobody[
          set my-list remove val my-list
        ][
          set pass-list lput item 0 val pass-list
        ]
      ]

      let angle-list [0 0 0 0] ;initialise the quadrant list
      let angle get-angle myself self

      if member? self pass-list[ ;  ;look for passengerID in pass-list -> this is to determine if the passenger has been seen already
        let pos position self pass-list  ;find their position and get their properties and store them
        let properties item pos my-list
        set angle-list item 4 properties
        let previous_vuln  (previous_predicted_vuln properties)
        set my-list remove-item pos my-list
        set pass-list remove-item pos pass-list
        ]

        if length my-list >= 50[  ;memory list is 50 values in length so remove the earliest memory -> the first one
          set my-list check-and-move-security-memory my-list
          set my-list but-first my-list

        ]
          set angle-list replace-item (angle-to-quadrant angle) angle-list 1
          set my-list add_person_details_to_memory angle-list my-list
          decide-on-concern-level-and-whether-to-make-security-aware  self pers (sum angle-list)
  ]
  ; take locally stored my-list and set it as observer's seen-list
  set seen-list my-list
  ;print was used for debugging
  print person
  print seen-list
  ]

end


;returns angle between observer (person) and target (target)
to-report get-angle [person target]
let dif 0
ask person[

    ;Errors if they occupy the same patch -> so only carry out function if in different patch
    if [distance person] of target > 1[

    ;perspective is the angle of vector from target to person heading is the heading of target -> initialise these as heading initially
    let heading-angle heading
    let perspective-angle 0

    ask target[
      ;get these angles -> probably don't need the first one
      set heading-angle heading
      set perspective-angle towards myself
    ]

    ;get the difference to get orientation target is being observed from
    set dif perspective-angle - heading-angle
    if dif < 0 [set dif 360 + dif]
    ]
  ]
  ;print "dif"
 ; print dif
  ;return this value
  report dif
end
