
to move-forward [x person]
  forward x
  let myx xcor
  let myy ycor
  let carrying carrying-baggage

  if has-baggage[
    if not carrying-baggage [
      let bag one-of baggages with [owner = person and distance person <= 2]
      if  not (bag = nobody) [
        if random-float 1 > chance-of-forget-bag [
       ask bag [
            create-link-with person]
          set carrying-baggage True
    ]]]
     ask link-neighbors [
         set xcor myx
         set ycor myy
    ]]


end

; sets the heading towards the nearest stair pixel and move towards it
to move-towards-the-stairs [person]
    ask person [
     let target-patch min-one-of (patches with [patch-type = "stairs"]) [distance myself] ;find the nearest stair pixel
     set heading towards  target-patch ; look at it
     move-forward 1 myself
  ] ; move to it
end



to sit [person]
  if random-float 1 < chance-of-putting-down-bag[
    ask my-links [
     die
    ]
    set carrying-baggage False
  ]

  set gait "sitting"
end

to stand [person]
   if random-float 1 < chance-of-putting-down-bag[
    ask my-links [
     die
    ]
        set carrying-baggage False
  ]
  set gait "standing"
end

; this is called when we are near the entrance and want to leave
to try-and-exit [person p-num]
     ifelse any? patches with [patch-type = "entrance"] in-radius 2[
       ask link-neighbors [
     die ; remove suitcases

    ]
       die  ; if we are within 2 pixels of the entrance - leave (die)
      ][ ; else we face the nearest entrance (we are already at the right platform at this point) and move towards it
        face min-one-of patches with [patch-type = "entrance" and number = p-num] [distance myself]
        move-forward 1 self]
end


to go-to [person x y]
  let target patch x y
  ask person [
    let person-p-type [patch-type] of patch-here
    let person-p-num [number] of patch-here
    let target-p-type [patch-type] of target
    let target-p-num [number] of target

    set objective-number target-p-num ; set objective-number equal to the target
    face target ; set direction towards the target

    ifelse distance target > 1 [ ;if distance between the criminal and the target victim is more than 1

      ifelse person-p-num != objective-number or person-p-type != target-p-type[

        ifelse person-p-num != objective-number[
          change-platform-step self][
          move-towards-the-stairs self
        ]
      ][
        forward 1
    ]] ; go to the platform that target is on
        [stop]
    ; move one step forwards towards the victim
  ]
end

to try-and-find-a-place-to-sit [person]
 let plat-num objective-number
  ifelse [pcolor] of patch-here = bench-col and not any? (other passengers-here) and number = plat-num [
  sit person
  ][
    carefully[
     let bench one-of patches with [pcolor = bench-col and  patch-type = "platform" and number = plat-num and not any? (other passengers-here) ]
      set heading towards bench
      move-forward 1 person ][
     find-a-place-to-stand person
    ]
  ]
end

to put-down-luggage [person]
  ask links [
   die
  ]

end
to find-a-place-to-stand [person]
  carefully [
  let plat-num objective-number
    ifelse any? (other passengers) in-radius 3 [
  let head  one-of patches  with [not any? (other passengers) in-radius 3 and patch-type = "platform" and number = plat-num  ]
  set heading head
  move-forward 1 person][
     if [number] of patch-here = plat-num[
        stand person
      ]
  ]]
  [
    move-around-randomly person
  ]
end

to move-along-corridor [person]
  ifelse [number] of patch-here = objective-number and [patch-type] of patch-here = "stairs"[ ; if we have arrived at the correct stairs
    ask person [
     set heading 0
      move-forward 2 myself
    ]
  ][  ; else of the if
  ask person [
    let num objective-number
    let x [pxcor] of one-of patches with [patch-type = "platform" and number = num ] ; pixel of the platform we want to get to
    ifelse x > xcor [  ; face and go right
       set heading 90
       move-forward 1 myself
    ][ ; face and go left (this is the else part of the if)

      set heading -90
        move-forward 1 myself
    ]
  ]]
end

to move-around-randomly [person] ; temp funciton where we just wiggle around a bit
  let n objective-number
  carefully [
  if ticks mod 5 = 0 [
    set heading towards one-of patches with [patch-type = "platform" and number = n] ]

  if [patch-type] of patch-ahead 1 != "line" [
    move-forward 1 myself
  ]][
   back 1
  ]

end

to stroll [person] ; temp funciton where we just wiggle around a bit
  let n objective-number
  carefully [
  if [patch-type] of patch-ahead 1 != "line" [
    move-forward 1 myself
  ]][
   move-forward -2 person
  ]


end


to board-train [person]
  let line objective-number  ; the line we want to join
  let nearest min-one-of trains with [train-line-number = line] [distance myself] ; closest carriage to me
    facexy  xcor  [pycor] of nearest ; face the y cordinate of the carriage
    if abs (ycor - [pycor] of nearest) <= 2[  ; we only look at the carriage if it is directly to the right/left of us
      face nearest
    ]

    move-forward 1 person
    if any? trains in-radius 2[  ; are we really close to the train?
    ask trains in-radius 2[  ; if yes, get on it and add to the count of the carriage
      set passenger-count passenger-count + 1
      set label passenger-count
      ]
     ask link-neighbors [
     die  ; remove the suitcase
    ]
     die ; this just removes the passenger from the game
]


end


to change-platform-step [person] ; lets try and change platform
  let p-num [number] of patch-here ; the number we are at
  let p-type [patch-type] of patch-here ; the type of patch we are on

  ifelse p-type = "platform"  [  ; if we are on a platform
    ifelse (p-num != objective-number) [  ; if this is the wrong platform
      ifelse p-num = 2 and objective-number = 3 or p-num = 3 and objective-number = 2 [ ; if we should be on 3 but are on 2 etc, we dont need to go to the stairs
        if (gait = "walking") [
          if ([breed] of person = passengers) [try-and-find-a-place-to-sit person]
        ]
      ;  move-around-randomly person
        if ([breed] of person = passengers) [set objective "board-train"]
      ][ ; else we need to go to the stairs
    move-towards-the-stairs person
    ]][ ; else (i.e we are at the wrong objective number) we need to go to the stairs
      if (gait = "walking") [
        if ([breed] of person = passengers) [try-and-find-a-place-to-sit person]
      ]
     ; move-around-randomly person
      if ([breed] of person = passengers) [set objective "board-train"]
    ]
  ][ ifelse p-type = "stairs" [ ; if we are on the stairs, lets move along the corridor
      
     move-along-corridor person
  ]
  [if p-type = "corridor" [ ; if we are on a corridor, keep going down it
     move-along-corridor person
]]]
end


to face-target-forward-one [person target]
  ask person[
    set heading towards target
    fd 1
  ]
end

to face-south-forward-one [person]
  ask person[
    set heading 180
    fd 1
  ]
end

to face-east-forward-one [person]
  ask person[
    set heading 90
    fd 1
  ]
end

to face-west-forward-one [person]
  ask person[
    set heading 270
    fd 1
  ]
end

to face-north-forward-one [person]
  ask person[
    set heading 0
    fd 1
  ]
end

to-report on_the_right_plaform [pass p-num p-type]
  report p-num != objective-number or p-type != "platform"
end

to-report not_at_entrance_and_want_to_leave [pass p-type]
  report  p-type = "entrance" and not wants-to-exit
end

to-report able_to_get_on_train [line]
  report any? trains with [train-line-number = line and arriving = false and leaving = false]
end

to-report can_exit [p-num p-type]
  report wants-to-exit and p-num = objective-number and p-type != "corridor"
end

to-report follow_on_the_same_platform_or_stairs_and_corridor [pass p-type target-p-type]
  report (p-type = target-p-type) or (p-type = "stairs" and target-p-type = "corridor") or (p-type = "corridor" and target-p-type = "stairs")
end

to-report follow_from_platform_to_target_on_stairs_or_corridor [pass target p-type target-p-type]
  report (p-type = "platform" and target-p-type = "stairs" and [ycor] of target < ycor) or (p-type = "platform" and target-p-type = "corridor" and [ycor] of target < ycor)
end

