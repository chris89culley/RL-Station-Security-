
to checking-gait [person]
   if (gait = "sitting" or gait = "standing")[
       look self
     ]
end

; not used at the moment, as it's essentially just spinning around on the spot...
to look-for-target [person]
  set heading heading + 20
end 

;working title... as it's something between searching and engaging
to search-for-target [person target]
  
  ;look updates positions - namely that of the target  
  look self
  ;gets the properties of the target
  let target-properties get-target-properties self target
  ;get the last known positions of the target
  let targ-x item 2 target-properties
  let targ-y item 3 target-properties
  
  ;if in the area of the target stop. Temporary, we can add apprehend or something at a later date.
  if (distance target < 2) [
    stop
  ]  
  
  ;if not in the area of the target - get a list of agents in view - excluding yourself
  let agents-in-view (turtle-set passengers criminals securities)  
  set agents-in-view (turtle-set agents-in-view in-cone 50 60) with [self != myself]
  
  ;if target in view, follow, if not go to last known position
  ifelse (member? target agents-in-view)[
    follow-target self target
  ][go-to person targ-x targ-y]
  
end

to-report get-target [person]
  ;gets a list of agents in view -> This is done a lot, so maybe I could make a function similar to look that returns this? 
  let target-list []
  foreach seen-list [[val]->
    let person_memory item 0 val
    set target-list lput item 0 val target-list  
    ]
  ;Set target, and return it, for now set target to the last person seen
  let target last target-list
  report target 
end

;chooses a target (could simply pass target in at later date) and returns target with memorised properties
to-report get-target-properties [person target]
  
  ;initialise target properties
  let target-properties 0
  
  ;get position of the target in the seen list 
  let target-list []
  foreach seen-list [[val]->
    let person_memory item 0 val
    set target-list lput item 0 val target-list  
  ]
  let pos position target target-list
  
  ;not sure why I put this in an ask function.. but it sets the target properties to those in the same position as the target in target-list
  if pos = False[
    report False 
    print target
    print "the above wasn't in the list"
  ]
  
  set target-properties item pos seen-list
  
  ;returns the properties for the search-for-target function (renamed from engage-target) 
  report target-properties
end


to-report desireability-update [target]
    ; the ticks can contribute up to 1/4 (i.e when they are close) then adds 1/5 1/6 etc as they get further away every 4 away 
   let tick_contri min (list 0.4 ((1 / ((max (list 1 (ticks - (item 1 target))))))))
   ; the distance can contribute up to 1/4 (i.e when they are close 
   let distance_contri min (list 0.1 ( 1 / ((max (list 1 (abs  (distancexy item 2 target item 3 target)))))))
   ; the familiarity is timesed by (2 * the vuln + 1 * aesthetic) this is all div'd by 3 so can be a maximum of 1 
   let pred_contri min (list 0.5 (((item 6 target +  2 * item 5 target) * (1 - item 7 target)) / 4))
  ; print word "true distance "  (abs (distancexy item 2 target item 3 target))
  ; print word "tick component " tick_contri
  ; print word "distance component " distance_contri
  ; print word "pred component " pred_contri
   report pred_contri  +  tick_contri  + distance_contri

  
end 

; here we decide if we want to move from investigate to steal/arrest or to explore 
to investigate-condition-update [pers target objective_on_satisfaction]
   let target-id item 0 target 
     
   
 
   let des desireability-update target 
   print (word pers " is currently investigating " target " they have a des score of " des) 
  

   if des > target_steal_desireability [
    print (word  "trying to steal or arrest" target)
    ;set objective  "steal_from_target"
    change-objective objective_on_satisfaction
  ]
   if des < give-up-on-target [
    if target-id != nobody[
    ask target-id[
      ;decrease suspiciousness by 10%
      set suspicious-level (suspicious-level * 0.9)
    ]]
    ;set objective "explore"
    change-objective "explore"
  ]
end 

to check-i-should-still-steal-arrest [pers target] 
  if  desireability-update target < give-up-on-target[
   ;set objective "explore"
   change-objective "explore"
  ]
end 

to explore [explore-time]
  
  ;maybe add a randomisation around this
  ;let fluctuating-start-tick round random-normal objective-start-tick 10
  
  let time-exploring-platform ticks - objective-start-tick
  
  if time-exploring-platform mod explore-time = 0 [
    get-new-platform
  ]
  
  ;exploring and sitting code is very buggy at the moment -> will constantly flip between sitting down and standing up, and will also cross the tracks in order do so
  
  ;let chance-to-sit random-normal 0.2 0.125
  ;if gait = "sitting" [set chance-to-sit random-normal 0.8 0.125]
  ;ifelse chance-to-sit > 0.5 [try-and-find-a-place-to-sit self][
  
  look-around self objective-number
  
  
end


to look-around [person platform-number] ; pass in the objective platform that crimanl needs to explore
  ask person[
    look self ; initiate look operation function
    let p-num [number] of patch-here ;set the current platform number of the patch here
    let p-type [patch-type] of patch-here ; set the type of patch here
    set objective-number platform-number ; set global objective-number of the criminal to the input platform-number argument (input through GUI)
    
    let x xcor ;set the current xcor local value
    let y_north max-pycor * 0.9 ;set the local ycor of north platform
    let y_south max-pycor * 0.2 ; set the local ycor of south platform
    let destination-north patch x y_north ; set the local north destination
    let destination-south patch x y_south ; set the local south destination
    
    ifelse (p-num = objective-number and p-type = "platform") or (p-num = objective-number and p-type = "entrance")[ ; if we are on the right platform
      ifelse y_north > ycor and heading = 0[ ; if we are not north enough towards the north side of the platform and heading is north
        ifelse (patch-here = destination-north) [ ; if we are on the north destination location
          walk-to-destination self destination-south ; face south and walk towards south destination location
          ][
          walk-to-destination self destination-north ; if not on the north destination location, keep walking north
          ]
      ][
        ifelse patch-here = destination-south [ ; if on the south destination location
          walk-to-destination self destination-north ; face north and walk towards north destination location
          ][ ; 
          walk-to-destination self destination-south ; if not on the south destination location then keep heading south
          ]]
       ][
    change-platform-step self] ; if on the wrong platform then keep changing platform
  ]
  
end


to explore-condition-update [pers] 
  
  let desireability map [x ->  desireability-update x] seen-list
 ; print (word "desireability " desireability  " list of " pers)
  ifelse length seen-list > 0 and (max desireability > target_desireabiliy) [

   
   change-objective "investigate"
   set victim-target item position (max desireability) desireability seen-list 
   print (word pers " is changing to investigate" victim-target)
   ;print victim-target
  ][
    ;set objective "explore"
    change-objective "explore"
  ]
  
  
end 

to-report fill-angles [person target]
  
  ;initialise target properties
  let target-properties 0
  
  ;get position of the target in the seen list 
  let target-list []
  foreach seen-list [[val]->
    let person_memory item 0 val
    set target-list lput item 0 val target-list  
  ]
  let pos position target target-list
  
  ;not sure why I put this in an ask function.. but it sets the target properties to those in the same position as the target in target-list
  
  set target-properties item pos seen-list
  
  ;returns the properties for the search-for-target function (renamed from engage-target) 
  report target-properties

end

