;security_behaviour

to patrol-step
  look self
  ifelse (heading > 270 or heading < 90) [set heading 0][set heading 180]
  let p-type [patch-type] of patch-here
    let p-num [number] of patch-here
    ifelse on_the_right_plaform self p-num p-type[
      change-platform-step self
    ][
      ; What is this >> ???? >> it chnges the platform
      ifelse((ycor > max-pycor - 3) or (ycor < min-pycor + 10 and heading = 180))[get-new-platform][move-forward 1 self]
    ]
end


to question-suspect [person suspect]
  
  ;printout says what's happening   
  print (word person " is  questioning " suspect)
  set number-secur-questioned number-secur-questioned  + 1
  
  ;ask both parties to stop
  ask person [
     stand self
   ]
   ask suspect [
     stand self
     set stopped true
   ]
  
  ;person will 
   ask person[
    ;new look function which only updates the target -> 'true' refers to an argument fill-angle-list
    look-target person suspect true
    ;now re-evaluate the targets suspicious-level and move into arrest if suspicious enough
    set victim-target get-target-properties self suspect
    investigate-condition-update person victim-target "arrest_target"
   ]
  
  ;if person isn't arresting let suspect carry on moving
  ask suspect[
   if [objective] of person != "arrest_target" [
      ask suspect [
        set suspicious-level 0
        set stopped false
      ]
   ]
  ]
  
end

to attempt_arrest
   ;print out arresting status

      print (word " arresting "  victim-target)
      
      ;get the suspect from victim-target, if they're a criminal end the simulation in next tick
      let suspect item 0 victim-target
      ifelse [breed] of suspect = criminals [
      print "SECURITY WINS" 
      set end-state true 
      ][ 
      ;if not a criminal -> set their suspicious-level permanently to 0 and let them carry on
      ask suspect[
        print "wrongly accused"
        set suspicious-level 0
        set stopped false
      ]
      ;go back to exploring
      change-objective "explore"
      ]
  
end 

; to increase the suspicion level we simply increase the number of angles with which we have seen them from
to increase_suspicion_level [person x y]
  ask sec-id [
    let pos -1
    let person-memory False 
  
  foreach seen-list [[val]->
    if item 0 val = person [
        set pos position val seen-list 
        set person-memory val
     ]   
   ]

    ifelse pos > 0 [ ; we simply increase the number of angles with which we have seen them from
      set person-memory replace-item 4 person-memory [1 1 1 1]
      set person-memory replace-item 2 person-memory x
      set person-memory replace-item 3 person-memory y
      set seen-list replace-item pos seen-list person-memory 
    ][
      set objective-number [number] of patch x y     
    ]
    
  ]


end 

;largely the same as criminal_turn_movement_decision -> with some changes to objectives
to security_turn_movement_decision [person]
  
  set last-target False 
  set last-objective objective
  if last-objective = "arrest_target" or last-objective = "investigate"[
    set last-target victim-target
  ]
 
  
  ; interim objective input via API to change objective during the simulation
  ; set objective criminal_objective_input ;
    let p-num [number] of patch-here 
    let p-type [patch-type] of patch-here
      
    ifelse objective = "arrest_target"[ 
       attempt_arrest
      
      ][
      ifelse objective = "explore" [
        ;security patrols if nothing peculiar seen
        explore 200 
        ;patrol-step
        explore-condition-update person
  ][
      if objective = "investigate" [
   ;     if ((ticks - objective-start-tick) > 100) [
    ;    change-objective "explore"
     ;   stop
      ;  ] 
        ifelse member? victim-target seen-list [
        look self
        let suspect item 0 victim-target ; set suspect local variable
        if not is-turtle? suspect [
           change-objective "explore" 
           stop
        ]
     ;   set victim-target get-target-properties self suspect 
        let previous-location patch (item 2 victim-target)(item 3 victim-target) ; set patch target as the last seen location of victim
    
        ifelse  (not member? previous-location  patches in-radius 5) and (not any? passengers in-cone 25 60 = suspect) [ ; if victim is not in field of view
          ifelse p-num != [number] of previous-location [ ; if on the wrong platform, change platform
             set objective-number [number] of previous-location
             change-platform-step self
             ][
             set heading towards previous-location ; if on the right platform, move towards the previous-location
             move-forward 1 self
             ]
         ][  
          carefully[
          set victim-target get-target-properties self suspect ; if victim is already in the field of view, update victim-target memory list by calling look and get-target-properties
          ;get location and go-to
          let targ-x item 2 victim-target
          let targ-y item 3 victim-target
          go-to self targ-x targ-y
          ;if close enough
          if (distance suspect < 2)[
             ;move to questioning the target
             question-suspect self suspect
             stop
        ]][stop]
    ]

        ; Yang: i am not sure if this belongs here or it should be in the investigate-condition-update as it involves chaning objective
        ; Chris?
        if (patch-here = previous-location) and (any? passengers in-cone 25 60 != suspect)[ ; if patch-here is the previous-location and victim is not in the field of view
        set objective-number p-num  ; set objective number to patch here and explore this platform
        change-objective "explore"] ; change objective to explore
    
  ][ change-objective "explore" set victim-target False ]]]]

end
 

